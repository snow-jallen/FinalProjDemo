@page "/history"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.EntityFrameworkCore;
@inject IHttpClientFactory httpClientFactory
@inject IHttpContextAccessor contextAccessor
@inject TokenProvider tokenProvider

<h3>Forecasts</h3>

<button class="btn btn-primary" @onclick=addForecast>Add Forecast</button>

@foreach(var forecast in ForecastList)
{
    <p>@forecast.Date</p>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        await RefreshAsync();
    }

    private async Task addForecast()
    {
        var newForecast = new WeatherForecast
            {
                Date = ForecastList.Max(f => f.Date).AddDays(1),
                Summary = $"Forecast #{ForecastList.Count()}",
                TemperatureC = ForecastList.Max(f => f.TemperatureC) + 1
            };
        var httpClient = httpClientFactory.CreateClient("MyApi");
        try
        {
            var response = await httpClient.PostAsJsonAsync("/weatherforecast", newForecast);
            response.EnsureSuccessStatusCode();
        }
        catch(Exception ex)
        {
            throw;
        }
    }

    private async Task RefreshAsync()
    {
        var httpClient = httpClientFactory.CreateClient("MyApi");
        ForecastList = await httpClient.GetFromJsonAsync<IEnumerable<WeatherForecast>>("/weatherforecast");
        if(ForecastList.Any() is false)
        {
            ForecastList = new List<WeatherForecast>(new[]{
                new WeatherForecast
                    {
                        Date = new DateTime(2012, 12, 22, 0, 0, 0, DateTimeKind.Utc),
                        Summary = "Apocolyptic",
                        TemperatureC = 500
                    }
            });
        }
    }

    public IEnumerable<WeatherForecast> ForecastList { get; set; } = new List<WeatherForecast>();
}
